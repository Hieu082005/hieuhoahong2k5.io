const axios = require('axios');

let lastUpdatedTime = null;

// Export m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t√≠nh execute v√† update
module.exports = {
    execute: async function(ctx) {
        try {
            // L·∫•y ƒë·ªãa ƒëi·ªÉm t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            const location = ctx.message.text.split(' ').slice(1).join(' ');

            if (!location) {
                // N·∫øu kh√¥ng c√≥ ƒë·ªãa ƒëi·ªÉm ƒë∆∞·ª£c cung c·∫•p, g·ª≠i tin nh·∫Øn l·ªói
                return ctx.reply('ƒê·ªãa ƒëi·ªÉm kh√¥ng t·ªìn t·∫°i!');
            }

            // G·ªçi h√†m getWeatherInfo ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt
            const weatherInfo = await getWeatherInfo(location);

            // G·ª≠i th√¥ng tin th·ªùi ti·∫øt d∆∞·ªõi d·∫°ng tin nh·∫Øn
            ctx.reply(formatWeatherInfo(weatherInfo));
        } catch (error) {
            // X·ª≠ l√Ω l·ªói n·∫øu c√≥
            console.error('L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt:', error);
            ctx.reply('ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt.');
        }
    },
    update: async function(ctx) {
        try {
            // L·∫•y th√¥ng tin th·ªùi ti·∫øt cho v·ªã tr√≠ hi·ªán t·∫°i
            const weatherInfo = await getWeatherInfo('Hanoi'); // Thay 'Hanoi' b·∫±ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh ho·∫∑c v·ªã tr√≠ c·ªë ƒë·ªãnh

            // G·ª≠i th√¥ng tin th·ªùi ti·∫øt d∆∞·ªõi d·∫°ng tin nh·∫Øn
            ctx.reply(formatWeatherInfo(weatherInfo));
        } catch (error) {
            // X·ª≠ l√Ω l·ªói n·∫øu c√≥
            console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin th·ªùi ti·∫øt:', error);
            ctx.reply('ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin th·ªùi ti·∫øt.');
        }
    }
};

// H√†m async ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt t·ª´ API
async function getWeatherInfo(location) {
    try {
        // S·ª≠ d·ª•ng API c·ªßa OpenWeatherMap
        const apiKey = 'a013dd4858a6497c6ef21a1285b4cfcb';
        const response = await axios.get('http://api.openweathermap.org/data/2.5/weather', {
            params: {
                q: location,
                appid: apiKey,
                units: 'metric' // ƒê∆°n v·ªã nhi·ªát ƒë·ªô Celsius
            }
        });

        // Tr√≠ch xu·∫•t th√¥ng tin th·ªùi ti·∫øt t·ª´ ph·∫£n h·ªìi
        const weatherData = response.data;

        // Tr√≠ch xu·∫•t th√¥ng tin c·∫ßn thi·∫øt
        const cityName = weatherData.name;
        const temperature = weatherData.main.temp;
        const weatherDescription = weatherData.weather[0].description;
        const humidity = weatherData.main.humidity;
        const windSpeed = weatherData.wind.speed;

        return {
            location: {
                name: cityName
            },
            temperature,
            weatherDescription,
            humidity,
            windSpeed
        };
    } catch (error) {
        // X·ª≠ l√Ω l·ªói n·∫øu c√≥
        console.error('L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt:', error);
        throw new Error('ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt.');
    }
}

// H√†m ƒë·ªÉ ƒë·ªãnh d·∫°ng th√¥ng tin th·ªùi ti·∫øt
function formatWeatherInfo(weatherInfo) {
    return `üåÖ ƒê·ªãa ƒëi·ªÉm: ${weatherInfo.location.name}\nüå° Nhi·ªát ƒë·ªô: ${weatherInfo.temperature}¬∞C\n‚òÅÔ∏è T√¨nh tr·∫°ng: ${weatherInfo.weatherDescription}\nüí¶ ƒê·ªô ·∫©m: ${weatherInfo.humidity}%\nüí® T·ªëc ƒë·ªô gi√≥: ${weatherInfo.windSpeed}km/h\n`;
}
